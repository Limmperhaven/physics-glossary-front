"use strict";

var SpringerNature = SpringerNature || {};

SpringerNature.MathJaxPrefilterHook = function (data) {
    data.math = data.math.replace(/\\hbox\s*\{\s*\\AA\s*\}/g, '\\unicode\{x212B\}');

    data.math = data.math.replace(/\\text{\\AA}/g, "\\unicode{x212B}");
    data.math = data.math.replace(/\\AA/g, "\\it\\unicode{x212B}");

    data.math = data.math.replace(/\\text{\\textregistered}/g, "\\unicode{x00AE}");

    data.math = data.math.replace(/\\lowercase\s*\{([A-Z])\}/g,function(match, p1) {return [p1.toLowerCase()];});

    data.math = data.math.replace(/\\uppercase\s*\{([a-z])\}/g,function(match, p2) {return [p2.toUpperCase()];});

    data.math = data.math.replace(/\\lowercase\s*\{(.*?)\}/g,"$1");

    data.math = data.math.replace(/\\uppercase\s*\{(.*?)\}/g,"$1");

    data.math = data.math.replace(/\\textendash/g,"{-}");

    data.math = data.math.replace(/\\selectfont/g, "");

    data.math = data.math.replace(/\\textup/g, "\\text");

    data.math = data.math.replace(/\\hdots/g, "\\ldots");

    data.math = data.math.replace(/\\nicefrac/g, "\\bfrac");

    data.math = data.math.replace(/\\noalign/g,"");

    data.math = data.math.replace(/\\medskip/g,"");

    data.math = data.math.replace(/\\mathbbm \{C\}/g, "{\\unicode{x2102}}");

    data.math = data.math.replace(/\\mathbbm\s*\{([A-Z])\}/g,"\\mathbb\{$1\}");

    data.math = data.math.replace(/\\mathbbm\s*\{a\}/g,"\\unicode\{x1D552\}");

    data.math = data.math.replace(/\\mathbbm\s*\{b\}/g,"\\unicode\{x1D553\}");

    data.math = data.math.replace(/\\mathbbm\s*\{c\}/g,"\\unicode\{x1D554\}");

    data.math = data.math.replace(/\\mathbbm\s*\{d\}/g,"\\unicode\{x1D555\}");

    data.math = data.math.replace(/\\mathbbm\s*\{e\}/g,"\\unicode\{x1D556\}");

    data.math = data.math.replace(/\\mathbbm\s*\{f\}/g,"\\unicode\{x1D557\}");

    data.math = data.math.replace(/\\mathbbm\s*\{g\}/g,"\\unicode\{x1D558\}");

    data.math = data.math.replace(/\\mathbbm\s*\{h\}/g,"\\unicode\{x1D559\}");

    data.math = data.math.replace(/\\mathbbm\s*\{i\}/g,"\\unicode\{x1D55A\}");

    data.math = data.math.replace(/\\mathbbm\s*\{j\}/g,"\\unicode\{x1D55B\}");

    data.math = data.math.replace(/\\mathbbm\s*\{k\}/g,"\\unicode\{x1D55C\}");

    data.math = data.math.replace(/\\mathbbm\s*\{l\}/g,"\\unicode\{x1D55D\}");

    data.math = data.math.replace(/\\mathbbm\s*\{m\}/g,"\\unicode\{x1D55E\}");

    data.math = data.math.replace(/\\mathbbm\s*\{n\}/g,"\\unicode\{x1D55F\}");

    data.math = data.math.replace(/\\mathbbm\s*\{o\}/g,"\\unicode\{x1D560\}");

    data.math = data.math.replace(/\\mathbbm\s*\{p\}/g,"\\unicode\{x1D561\}");

    data.math = data.math.replace(/\\mathbbm\s*\{q\}/g,"\\unicode\{x1D562\}");

    data.math = data.math.replace(/\\mathbbm\s*\{r\}/g,"\\unicode\{x1D563\}");

    data.math = data.math.replace(/\\mathbbm\s*\{s\}/g,"\\unicode\{x1D564\}");

    data.math = data.math.replace(/\\mathbbm\s*\{t\}/g,"\\unicode\{x1D565\}");

    data.math = data.math.replace(/\\mathbbm\s*\{u\}/g,"\\unicode\{x1D566\}");

    data.math = data.math.replace(/\\mathbbm\s*\{v\}/g,"\\unicode\{x1D567\}");

    data.math = data.math.replace(/\\mathbbm\s*\{w\}/g,"\\unicode\{x1D568\}");

    data.math = data.math.replace(/\\mathbbm\s*\{x\}/g,"\\unicode\{x1D569\}");

    data.math = data.math.replace(/\\mathbbm\s*\{y\}/g,"\\unicode\{x1D56A\}");

    data.math = data.math.replace(/\\mathbbm\s*\{z\}/g,"\\unicode\{x1D56B\}");

    data.math = data.math.replace(/\\mathbbm\s*\{0\}/g,"\\unicode\{x1D7D8\}");

    data.math = data.math.replace(/\\mathbbm\s*\{1\}/g,"\\unicode\{x1D7D9\}");

    data.math = data.math.replace(/\\mathbbm\s*\{2\}/g,"\\unicode\{x1D7DA\}");

    data.math = data.math.replace(/\\mathbb\s*\{a\}/g,"\\unicode\{x1D552\}");

    data.math = data.math.replace(/\\mathbb\s*\{b\}/g,"\\unicode\{x1D553\}");

    data.math = data.math.replace(/\\mathbb\s*\{c\}/g,"\\unicode\{x1D554\}");

    data.math = data.math.replace(/\\mathbb\s*\{d\}/g,"\\unicode\{x1D555\}");

    data.math = data.math.replace(/\\mathbb\s*\{e\}/g,"\\unicode\{x1D556\}");

    data.math = data.math.replace(/\\mathbb\s*\{f\}/g,"\\unicode\{x1D557\}");

    data.math = data.math.replace(/\\mathbb\s*\{g\}/g,"\\unicode\{x1D558\}");

    data.math = data.math.replace(/\\mathbb\s*\{h\}/g,"\\unicode\{x1D559\}");

    data.math = data.math.replace(/\\mathbb\s*\{i\}/g,"\\unicode\{x1D55A\}");

    data.math = data.math.replace(/\\mathbb\s*\{j\}/g,"\\unicode\{x1D55B\}");

    data.math = data.math.replace(/\\mathbb\s*\{k\}/g,"\\unicode\{x1D55C\}");

    data.math = data.math.replace(/\\mathbb\s*\{l\}/g,"\\unicode\{x1D55D\}");

    data.math = data.math.replace(/\\mathbb\s*\{m\}/g,"\\unicode\{x1D55E\}");

    data.math = data.math.replace(/\\mathbb\s*\{n\}/g,"\\unicode\{x1D55F\}");

    data.math = data.math.replace(/\\mathbb\s*\{o\}/g,"\\unicode\{x1D560\}");

    data.math = data.math.replace(/\\mathbb\s*\{p\}/g,"\\unicode\{x1D561\}");

    data.math = data.math.replace(/\\mathbb\s*\{q\}/g,"\\unicode\{x1D562\}");

    data.math = data.math.replace(/\\mathbb\s*\{r\}/g,"\\unicode\{x1D563\}");

    data.math = data.math.replace(/\\mathbb\s*\{s\}/g,"\\unicode\{x1D564\}");

    data.math = data.math.replace(/\\mathbb\s*\{t\}/g,"\\unicode\{x1D565\}");

    data.math = data.math.replace(/\\mathbb\s*\{u\}/g,"\\unicode\{x1D566\}");

    data.math = data.math.replace(/\\mathbb\s*\{v\}/g,"\\unicode\{x1D567\}");

    data.math = data.math.replace(/\\mathbb\s*\{w\}/g,"\\unicode\{x1D568\}");

    data.math = data.math.replace(/\\mathbb\s*\{x\}/g,"\\unicode\{x1D569\}");

    data.math = data.math.replace(/\\mathbb\s*\{y\}/g,"\\unicode\{x1D56A\}");

    data.math = data.math.replace(/\\mathbb\s*\{z\}/g,"\\unicode\{x1D56B\}");

    data.math = data.math.replace(/\\mathbb\s*\{0\}/g,"\\unicode\{x1D7D8\}");

    data.math = data.math.replace(/\\mathbb\s*\{1\}/g,"\\unicode\{x1D7D9\}");

    data.math = data.math.replace(/\\mathbb\s*\{2\}/g,"\\unicode\{x1D7DA\}");

    data.math = data.math.replace(/\\coloneq/g, ":=");

    data.math = data.math.replace(/\\kern *-\\nulldelimiterspace/g, "");

    data.math = data.math.replace(/\\user2/g, "\\pmb");

    data.math = data.math.replace(/\\mapstochar/g, "\\mapsto");

    data.math = data.math.replace(/\s*<!\[CDATA\[\s*(.*)\s*\]\]>\s*/gm, "$1");

    data.math = data.math.replace(/\\parbox(\[\w\])?{(.*?)}{(.*?)\\\\ (.*?)}/g, "\\parbox{$2}{$3 $4}");

    data.math = data.math.replace(/\\vspace\*?{[^}]+}/g, "");

    data.math = data.math.replace(/\\vspace\s*\*\{([^\{\}]+)\}/g,"");

    data.math = data.math.replace(/\\vspace\*?{[^}]+}/g,"");

    data.math = data.math.replace(/\\text{\\small{([^}]+)}}/g, "\\scriptstyle{\\text{$1}}");

    data.math = data.math.replace(/\\text{\\footnotesize{([^}]+)}}/g, "\\scriptstyle{\\text{$1}}");

    data.math = data.math.replace(/\\text{\\scriptsize{([^}]+)}}/g, "\\scriptscriptstyle{\\text{$1}}");

    data.math = data.math.replace(/\\text{\\tiny{([^}]+)}}/g, "\\scriptscriptstyle{\\text{$1}}");

    data.math = data.math.replace(/\\text\{\\bf\{([^\{\}]+)\}\}/g,"\\textbf\{$1\}");

    data.math = data.math.replace(/\\text\{\\mathbf\{([^\{\}]+)\}\}/g,"\\textbf\{$1\}");

    data.math = data.math.replace(/\\textrm/g, "\\mathrm");

    data.math = data.math.replace(/\\bf{/g, "\\mathbf{");

    data.math = data.math.replace(/\\text\\EUR/g, "€");

    data.math = data.math.replace(/\\"a|{\\"a}|\\"{a}/g, "\\unicode\{x00E4\}");

    data.math = data.math.replace(/\\"o|{\\"o}|\\"{o}/g, "\\unicode\{x00F6\}");

    data.math = data.math.replace(/\\"u|{\\"u}|\\"{u}/g, "\\unicode\{x00FC\}");

    data.math = data.math.replace(/\\"A|{\\"A}|\\"{A}/g, "\\unicode\{x00C4\}");

    data.math = data.math.replace(/\\"O|{\\"O}|\\"{O}/g, "\\unicode\{x00D6\}");

    data.math = data.math.replace(/\\"U|{\\"U}|\\"{U}/g, "\\unicode\{x00DC\}");

    data.math = data.math.replace(/{?\\ss}?/g, "\\unicode\{x00DF}");

    data.math = data.math.replace(/\\mathop ([^{]+?)\\limits/g, "\\mathop{$1}\\limits");

    data.math = data.math.replace(/\\user1/g, "\\mathcal");

    data.math = data.math.replace(/\\(big|Big|bigg|Bigg) *{([^}]+)}/g, "\\$1$2");

    data.math = data.math.replace(/\\textnormal{\\textsc{([^}]+)}}/g, "\\textsc {$1}");

    data.math = data.math.replace(/\\textsc *{([^}]+)}/g, "{\\rm ~#~$1~#~}");

    data.math = data.math.replace(/\\upvarphi/g, "\\varphi");

    data.math = data.math.replace(/\\llbracket/g, "⟦");

    data.math = data.math.replace(/\\rrbracket/g, "⟧");

    data.math = data.math.replace(/\\pounds/g, "£");

    data.math = data.math.replace(/\\raisebox *{-[^}]+}{\$(.+?)\$}/g, "_{$1}");

    data.math = data.math.replace(/\\raisebox *{[^}]+}{\$(.+?)\$}/g, "^{$1}");

    data.math = data.math.replace(/\\CIRCLE/g, "{\\large\\unicode[.55,0.05]{x25CF}}");

    data.math = data.math.replace(/\\LEFTcircle/g, "{\\large\\unicode[.55,0.05]{x25D1}}");

    data.math = data.math.replace(/\\RIGHTcircle/g, "{\\large\\unicode[.55,0.05]{x25D0}}");

    data.math = data.math.replace(/\\fontencoding{U}\Sfontfamily{wasy}\Sselectfont\Schar104/g, "‰");

    data.math = data.math.replace(/\\Dot/g, "\\dot");

    data.math = data.math.replace(/\\MakeLowercase\s*\{([A-Z])\}/g, function(match, p1) { return [p1.toLowerCase()]; });

    data.math = data.math.replace(/\\MakeUppercase\s*\{([a-z])\}/g, function(match, p2) { return [p2.toUpperCase()]; });

    data.math = data.math.replace(/\\MakeLowercase\s*\{(.*?)\}/g, "$1");

    data.math = data.math.replace(/\\MakeUppercase\s*\{(.*?)\}/g, "$1");

    data.math = data.math.replace(/\\textit\{\\textbf\{([^\{\}]+)\}\}/g,"\\boldsymbol\{$1\}");
    data.math = data.math.replace(/\\textbf\{\\textit\{([^\{\}]+)\}\}/g,"\\boldsymbol\{$1\}");

    data.math = data.math.replace(/\\texttt{\\small{([^}]+)}}/g, "\\small{\\texttt{$1}}");
    data.math = data.math.replace(/\\texttt{\\footnotesize{([^}]+)}}/g, "\\scriptstyle{\\texttt{$1}}");
    data.math = data.math.replace(/\\texttt{\\scriptstyle{([^}]+)}}/g, "\\scriptstyle{\\texttt{$1}}");
    data.math = data.math.replace(/\\footnotesize/g, "\\scriptstyle ");

    data.math = data.math.replace(/\\text{\\TH}/g, "\\unicode{xDE}");
    data.math = data.math.replace(/\\text{\\th}/g, "\\unicode{xFE}");
    data.math = data.math.replace(/\\textit{\\TH}/g, "\\it{\\unicode{xDE}}");
    data.math = data.math.replace(/\\textit{\\th}/g, "\\it{\\unicode{xFE}}");

    data.math = data.math.replace(/\\texttt\{\\textit\{([^\{\}]+)\}\}/g, "\\texttt\{$1\}");

    data.math = data.math.replace(/\\fbox\{\\hbox\{(.+)\}\}/g, "\\fbox\{$1\}");

    data.math = data.math.replace(/\\`e|{\\`e}|\\`{e}/g, "\\unicode\{x00E8\}");
    data.math = data.math.replace(/\\'e|{\\'e}|\\'{e}/g, "\\unicode\{x00E9\}");
    data.math = data.math.replace(/\\`E|{\\`E}|\\`{E}/g, "\\unicode\{x00C8\}");
    data.math = data.math.replace(/\\'E|{\\'E}|\\'{E}/g, "\\unicode\{x00C9\}");

    data.math = data.math.replace(/\\`a|{\\`a}|\\`{a}/g, "\\unicode\{x00E0\}");
    data.math = data.math.replace(/\\'a|{\\'a}|\\'{a}/g, "\\unicode\{x00E1\}");
    data.math = data.math.replace(/\\`A|{\\`A}|\\`{A}/g, "\\unicode\{x00C0\}");
    data.math = data.math.replace(/\\'A|{\\'A}|\\'{A}/g, "\\unicode\{x00C1\}");

    data.math = data.math.replace(/\\`o|{\\`o}|\\`{o}/g, "\\unicode\{x00F3\}");
    data.math = data.math.replace(/\\'o|{\\'o}|\\'{o}/g, "\\unicode\{x00F4\}");
    data.math = data.math.replace(/\\`O|{\\`O}|\\`{O}/g, "\\unicode\{x00D3\}");
    data.math = data.math.replace(/\\'O|{\\'O}|\\'{O}/g, "\\unicode\{x00D4\}");

    var reg = new RegExp("~#~(.*?)~#~", "g");
    var m;
    while (m = reg.exec(data.math)) {
        var result = "";
        for (var index = 0; index != m[1].length; index++) {
            var char = m[1].substr(index, 1);
            if (char.match(/[a-z]/)) {
                result += "{\\small " + char.toUpperCase() + "}";
            } else {
                result += char;
            }
        }
        data.math = data.math.replace(/~#~.*?~#~/, result);
    }
};

if (typeof module !== 'undefined') {
    module.exports = {
        prefilterHook: SpringerNature.MathJaxPrefilterHook
    }
}
